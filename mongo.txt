// 1. Create a collection named orders.
  db.createCollection('orders')

// 2. Insert at least 3 documents that represent an order. IMPORTANT: See section below for fields.
db.getCollection('orders').insert({ orderDate: '05-20-2016', orderTotal: "19.99", lineItems: [ {unitPrice: "19.99"}, {quantity: "1"}, {productName: "Tidy Cat Litter"}]});
db.getCollection('orders').insert({ orderDate: '05-15-2016', orderTotal: "60.99", lineItems: [ {unitPrice: "17.99"}, {quantity: "3"}, {productName: "Tennis Balls"}]});
db.getCollection('orders').insert({ orderDate: '05-09-2016', orderTotal: "129.99", lineItems: [ {unitPrice: "129.99"}, {quantity: "1"}, {productName: "Fish Tank"}]});

// 3. Find a single order document, any order document.
db.getCollection('orders').find({orderTotal: '129.99'})

// 4. Find all orders and make them look pretty.
db.getCollection('orders').find({}).pretty()

// 5. Find all orders with an orderDate that is prior to 1/1/2016.
db.orders.find({orderDate: { $lt: new Date('2016-01-01')}})

// 6. Find all orders with an orderDate that is after 1/1/2016.
db.orders.find({orderDate: { $gt: new Date('2016-01-01')}})

// 7. Find orders with lineItems that have a quantity that is less than 50, but greater than 5. HINT: Look at $and and dot notation.
db.orders.find({$and: [{'lineItems.quantity': {$lt: 50}}]})

// 8. Update one of your line items to 42.99. HINT: Look at dot notation
db.orders.update({},
  {$set: {'lineItems.0.unitPrice': 42.99}});

// Remove one of your orders.

db.orders.deleteOne({"_id" : ObjectId("58c8476873c62cdee5a093cb")});
